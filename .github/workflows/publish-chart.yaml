name: Publish Chart to OCI

on:
  push:
    branches:
      - master
    paths:
      - 'charts/**'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.detect.outputs.should_publish }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install yq
        run: |
          # renovate: datasource=github-releases depName=mikefarah/yq
          YQ_VERSION="4.44.3"
          wget --quiet https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64 --output-document yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq
          yq --version

      - name: Detect if chart needs publishing
        id: detect
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          CHART_PATH="charts/papermc"
          CHART_VERSION=$(yq eval '.version' "${CHART_PATH}/Chart.yaml")
          RELEASE_TAG="papermc-${CHART_VERSION}"

          if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            echo "Release $RELEASE_TAG already exists"
          else
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
            echo "Release $RELEASE_TAG needs publishing"
          fi

  publish:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: latest

      - name: Install ORAS
        uses: oras-project/setup-oras@v1

      - name: Install yq
        run: |
          # renovate: datasource=github-releases depName=mikefarah/yq
          YQ_VERSION="4.44.3"
          wget --quiet https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64 --output-document yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq
          yq --version

      - name: Install helm-unittest plugin
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Install check-jsonschema
        run: pip install check-jsonschema

      - name: Install Artifact Hub CLI
        run: |
          # renovate: datasource=github-releases depName=artifacthub/hub
          AH_VERSION="1.21.0"
          wget --quiet https://github.com/artifacthub/hub/releases/download/v${AH_VERSION}/ah_${AH_VERSION}_linux_amd64.tar.gz
          tar --extract --gzip --file ah_${AH_VERSION}_linux_amd64.tar.gz
          chmod +x ah
          sudo mv ah /usr/local/bin/ah
          ah version

      - name: Get chart metadata
        id: chart-metadata
        run: |
          CHART_PATH="charts/papermc"
          CHART_NAME=$(yq eval '.name' "${CHART_PATH}/Chart.yaml")
          CHART_VERSION=$(yq eval '.version' "${CHART_PATH}/Chart.yaml")
          APP_VERSION=$(yq eval '.appVersion' "${CHART_PATH}/Chart.yaml")

          echo "path=${CHART_PATH}" >> $GITHUB_OUTPUT
          echo "name=${CHART_NAME}" >> $GITHUB_OUTPUT
          echo "version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${CHART_NAME}-${CHART_VERSION}" >> $GITHUB_OUTPUT

          echo "Chart: ${CHART_NAME} v${CHART_VERSION} (app: ${APP_VERSION})"

      - name: Run validation tests
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"

          echo "Running validation for ${CHART_NAME} v${{ steps.chart-metadata.outputs.version }}"

          # Lint
          helm lint "${CHART_PATH}"

          # Schema validation
          if [ -f "${CHART_PATH}/values.schema.json" ]; then
            check-jsonschema --schemafile "${CHART_PATH}/values.schema.json" "${CHART_PATH}/values.yaml"
          else
            echo "No schema found, skipping schema validation"
          fi

          # Unit tests
          if [ -d "${CHART_PATH}/tests" ]; then
            helm unittest "${CHART_PATH}" --color
          else
            echo "No tests found, skipping unit tests"
          fi

          # Artifact Hub lint
          echo "Running Artifact Hub lint for ${CHART_NAME}"
          ah lint --kind helm --path "${CHART_PATH}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and push chart
        id: push
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"
          CHART_VERSION="${{ steps.chart-metadata.outputs.version }}"

          # Package chart
          helm package "${CHART_PATH}"

          # Push to GHCR
          CHART_FILE="${CHART_NAME}-${CHART_VERSION}.tgz"
          helm push "${CHART_FILE}" oci://ghcr.io/${{ github.repository_owner }}

          echo "Chart pushed successfully"

      - name: Publish Artifact Hub metadata
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"

          if [ -f "${CHART_PATH}/artifacthub-repo.yml" ]; then
            echo "Publishing Artifact Hub metadata for ${CHART_NAME}"

            oras push \
              ghcr.io/${{ github.repository_owner }}/${CHART_NAME}:artifacthub.io \
              --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
              ${CHART_PATH}/artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml

            echo "Artifact Hub metadata published successfully"
          else
            echo "No artifacthub-repo.yml found in ${CHART_PATH}, skipping metadata publishing"
          fi

      - name: Extract changelog
        id: changelog
        run: |
          CHART_PATH="${{ steps.chart-metadata.outputs.path }}"
          CHART_NAME="${{ steps.chart-metadata.outputs.name }}"
          CHART_VERSION="${{ steps.chart-metadata.outputs.version }}"
          APP_VERSION="${{ steps.chart-metadata.outputs.app_version }}"

          CHANGELOG_RAW=$(yq eval '.annotations."artifacthub.io/changes"' "${CHART_PATH}/Chart.yaml")

          RELEASE_BODY="## Chart: ${CHART_NAME} v${CHART_VERSION}

          **App Version**: ${APP_VERSION}

          ### Installation

          \`\`\`bash
          helm install ${CHART_NAME} \\
            oci://ghcr.io/${{ github.repository_owner }}/${CHART_NAME} \\
            --version ${CHART_VERSION}
          \`\`\`
          "

          if [ "$CHANGELOG_RAW" != "null" ] && [ -n "$CHANGELOG_RAW" ]; then
            RELEASE_BODY="${RELEASE_BODY}

          ### Changelog

          "
            TEMP_FILE=$(mktemp)
            SEPARATOR="|"
            echo "$CHANGELOG_RAW" | yq eval ".[] | .kind + \"${SEPARATOR}\" + .description" - > "$TEMP_FILE"

            while IFS="${SEPARATOR}" read -r kind description; do
              case "$kind" in
                "added")
                  emoji="‚ú®"
                  ;;
                "changed")
                  emoji="üîÑ"
                  ;;
                "deprecated")
                  emoji="‚ö†Ô∏è"
                  ;;
                "removed")
                  emoji="üóëÔ∏è"
                  ;;
                "fixed")
                  emoji="üêõ"
                  ;;
                "security")
                  emoji="üîí"
                  ;;
                *)
                  emoji="üìù"
                  ;;
              esac
              RELEASE_BODY="${RELEASE_BODY}- ${emoji} ${description}
          "
            done < "$TEMP_FILE"

            rm --force "$TEMP_FILE"
          fi

          RELEASE_BODY="${RELEASE_BODY}

          ---

          üì¶ **Published to**: \`ghcr.io/${{ github.repository_owner }}/${CHART_NAME}:${CHART_VERSION}\`
          "

          echo "$RELEASE_BODY" > release-notes.md

      - name: Create GitHub Release
        run: |
          gh release create "${{ steps.chart-metadata.outputs.tag }}" \
            --title "${{ steps.chart-metadata.outputs.name }} v${{ steps.chart-metadata.outputs.version }}" \
            --notes-file release-notes.md \
            "${{ steps.chart-metadata.outputs.name }}-${{ steps.chart-metadata.outputs.version }}.tgz"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## üöÄ Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ steps.chart-metadata.outputs.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.chart-metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version**: ${{ steps.chart-metadata.outputs.app_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`ghcr.io/${{ github.repository_owner }}/${{ steps.chart-metadata.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "helm install ${{ steps.chart-metadata.outputs.name }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  oci://ghcr.io/${{ github.repository_owner }}/${{ steps.chart-metadata.outputs.name }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --version ${{ steps.chart-metadata.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Version already exists
        if: needs.detect-changes.outputs.should_publish != 'true'
        run: |
          echo "## ‚ÑπÔ∏è Version Already Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Chart version already exists in releases." >> $GITHUB_STEP_SUMMARY
          echo "No action taken." >> $GITHUB_STEP_SUMMARY
