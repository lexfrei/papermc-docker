name: Build Paper Docker Images

on:
  schedule:
    - cron: "0 0 * * *" # Run daily
  workflow_dispatch: # Allow manual triggers

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      latest: ${{ steps.set-latest.outputs.latest }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25"
          cache: false

      - name: Install goPaperMC
        run: |
          go install github.com/lexfrei/goPaperMC/cmd/papermc@v0.0.2

      - name: Get Build Matrix
        id: set-matrix
        run: |
          # Get build matrix for GitHub Actions from the last 3 versions
          MATRIX=$(papermc --limit=3 ci github-actions paper)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

      - name: Get Latest Version
        id: set-latest
        run: |
          # Get the latest version string
          LATEST=$(papermc ci latest paper)
          echo "latest=$LATEST" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: lexfrei/papermc
          tags: |
            type=raw,value=${{ matrix.version }}-${{ matrix.build }}
            type=raw,value=${{ matrix.version }}
            ${{ matrix.version == needs.prepare.outputs.latest && 'type=raw,value=latest' || '' }}
      
      # First build for amd64 only and export to Docker (for Trivy scanning)
      - name: Build for scanning
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          platforms: linux/amd64
          load: true
          build-args: |
            DOWNLOAD_URL=${{ matrix.url }}
          tags: lexfrei/papermc:${{ matrix.version }}-${{ matrix.build }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: lexfrei/papermc:${{ matrix.version }}-${{ matrix.build }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      # Build multi-platform and push, using the cache from previous build
      - name: Build and push all platforms
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            DOWNLOAD_URL=${{ matrix.url }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  check-chart-version:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install yq
        run: |
          # renovate: datasource=github-releases depName=mikefarah/yq
          YQ_VERSION="4.44.3"
          wget --quiet https://github.com/mikefarah/yq/releases/download/v${YQ_VERSION}/yq_linux_amd64 --output-document yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq

      - name: Get versions
        id: versions
        run: |
          LATEST="${{ needs.prepare.outputs.latest }}"
          CURRENT_APP_VERSION=$(yq eval '.appVersion' charts/papermc/Chart.yaml | tr -d '"')

          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "current=$CURRENT_APP_VERSION" >> $GITHUB_OUTPUT

          echo "Latest PaperMC version: $LATEST"
          echo "Current chart appVersion: $CURRENT_APP_VERSION"

      - name: Trigger chart update
        if: steps.versions.outputs.latest != steps.versions.outputs.current
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Version mismatch detected. Triggering chart update workflow..."
          echo "Latest: ${{ steps.versions.outputs.latest }}"
          echo "Current: ${{ steps.versions.outputs.current }}"

          gh workflow run update-chart-version.yml \
            --field version=${{ steps.versions.outputs.latest }}

          echo "Chart update workflow triggered successfully"

      - name: No update needed
        if: steps.versions.outputs.latest == steps.versions.outputs.current
        run: |
          echo "Chart is already up to date with PaperMC version ${{ steps.versions.outputs.current }}"
